# HG changeset patch
# User Vitaliy Filippov <vitalif@yourcmc.ru>
# Date 1352387102 -14400
Bug 103901 - Patch needed for UserMessage extension (MW 1.16)

This patch does two things:
1) (Title.php) Lets extensions override standard MediaWiki right checks.
2) (Message.php) Adds NormalizeMessageKey hook call to new MediaWiki message interface.

diff -r b6139b507754 -r e0b943d30e3f includes/Message.php
--- includes/Message.php
+++ includes/Message.php
@@ -108,6 +108,7 @@
 	 */
 	public function __construct( $key, $params = array() ) {
 		global $wgLang;
+		wfRunHooks( 'NormalizeMessageKey', array( &$key, &$this->useDatabase, &$langCode, &$transform ) );
 		$this->key = $key;
 		$this->parameters = array_values( $params );
 		$this->language = $wgLang;
diff -r b6139b507754 -r e0b943d30e3f includes/Title.php
--- includes/Title.php
+++ includes/Title.php
@@ -1378,25 +1378,37 @@
 	 * @param $doExpensiveQueries Boolean whether or not to perform expensive queries
 	 * @param $short Boolean short circuit on first error
 	 *
-	 * @return Array list of errors
+	 * @return boolean Whether to continue permission hook processing
 	 */
-	private function checkPermissionHooks( $action, $user, $errors, $doExpensiveQueries, $short ) {
+	private function checkPermissionHooks( $action, $user, &$errors, $doExpensiveQueries, $short ) {
 		// Use getUserPermissionsErrors instead
-		$result = '';
+		$result = true;
 		if ( !wfRunHooks( 'userCan', array( &$this, &$user, $action, &$result ) ) ) {
-			return $result ? array() : array( array( 'badaccess-group0' ) );
+			if ( !$result ) {
+				$errors[] = array( 'badaccess-group0' );
+			}
+			return false;
 		}
 		// Check getUserPermissionsErrors hook
-		if ( !wfRunHooks( 'getUserPermissionsErrors', array( &$this, &$user, $action, &$result ) ) ) {
-			$errors = $this->resultToError( $errors, $result );
+		$result = true;
+		if ( !wfRunHooks( 'getUserPermissionsErrors', array( &$this, &$user, $action, &$result, &$errors, $short ) ) ) {
+			if ( $result !== true ) {
+				// Backwards compatibility
+				$errors = $this->resultToError( $errors, $result );
+			}
+			return false;
 		}
 		// Check getUserPermissionsErrorsExpensive hook
-		if ( $doExpensiveQueries && !( $short && count( $errors ) > 0 ) &&
-			 !wfRunHooks( 'getUserPermissionsErrorsExpensive', array( &$this, &$user, $action, &$result ) ) ) {
-			$errors = $this->resultToError( $errors, $result );
+		$result = true;
+		if ( $doExpensiveQueries &&
+			 !wfRunHooks( 'getUserPermissionsErrorsExpensive', array( &$this, &$user, $action, &$result, &$errors, $short ) ) ) {
+			if ( $result !== true ) {
+				// Backwards compatibility
+				$errors = $this->resultToError( $errors, $result );
+			}
+			return false;
 		}
-
-		return $errors;
+		return true;
 	}
 
 	/**
@@ -1663,7 +1675,6 @@
 		$errors = array();
 		$checks = array(
 			'checkQuickPermissions',
-			'checkPermissionHooks',
 			'checkSpecialsAndNSPermissions',
 			'checkCSSandJSPermissions',
 			'checkPageRestrictions',
@@ -1672,6 +1683,11 @@
 			'checkUserBlock'
 		);
 
+		if ( !$this->checkPermissionHooks( $action, $user, $errors, $doExpensiveQueries, $short ) ) {
+			// Give extensions a chance to override anything
+			return $errors;
+		}
+
 		while( count( $checks ) > 0 &&
 			   !( $short && count( $errors ) > 0 ) ) {
 			$method = array_shift( $checks );
