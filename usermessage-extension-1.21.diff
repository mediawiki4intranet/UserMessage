commit c574a367d94b21ec35a4d735db2fe9afd28cf761
Author: Vitaliy Filippov <vitalif@yourcmc.ru>
Date:   Fri Nov 16 02:59:22 2012 +0400

    Patch: usermessage-extension
    Type: feature
    
    Patch needed for UserMessage extension. CustIS Bug 103901
    
    This patch does two things:
    1) (Title.php) Lets extensions override standard MediaWiki right checks.
    2) (Message.php) Adds NormalizeMessageKey hook call to new MediaWiki message interface.

diff --git a/includes/Message.php b/includes/Message.php
index 54abfd1..687e179 100644
--- a/includes/Message.php
+++ b/includes/Message.php
@@ -258,6 +258,7 @@ class Message implements MessageSpecifier, Serializable {
 		}
 
 		$this->key = reset( $this->keysToTry );
+		wfRunHooks( 'NormalizeMessageKey', array( &$this->key, &$this->useDatabase, &$langCode, &$transform ) );
 
 		$this->parameters = array_values( $params );
 		$this->language = $language ?: $wgLang;
diff --git a/includes/Title.php b/includes/Title.php
index b9c4d26..33b7813 100644
--- a/includes/Title.php
+++ b/includes/Title.php
@@ -2078,28 +2078,47 @@ class Title {
 	 * @param string $rigor Same format as Title::getUserPermissionsErrors()
 	 * @param bool $short Short circuit on first error
 	 *
-	 * @return array List of errors
+	 * @return boolean Whether to continue permission hook processing
 	 */
-	private function checkPermissionHooks( $action, $user, $errors, $rigor, $short ) {
+	private function checkPermissionHooks( $action, $user, &$errors, $rigor, $short ) {
 		// Use getUserPermissionsErrors instead
-		$result = '';
+		$result = true;
 		if ( !Hooks::run( 'userCan', array( &$this, &$user, $action, &$result ) ) ) {
-			return $result ? array() : array( array( 'badaccess-group0' ) );
+			if ( !$result ) {
+				$errors[] = array( 'badaccess-group0' );
+			} elseif ( !$errors ) {
+				$errors = array();
+			}
+			return false;
 		}
 		// Check getUserPermissionsErrors hook
+		$result = true;
 		if ( !Hooks::run( 'getUserPermissionsErrors', array( &$this, &$user, $action, &$result ) ) ) {
-			$errors = $this->resultToError( $errors, $result );
+			if ( $result !== true ) {
+				// Backwards compatibility
+				$errors = $this->resultToError( $errors, $result );
+			} elseif ( !$errors ) {
+				$errors = array();
+			}
+			return false;
 		}
 		// Check getUserPermissionsErrorsExpensive hook
+		$result = true;
 		if (
 			$rigor !== 'quick'
 			&& !( $short && count( $errors ) > 0 )
 			&& !Hooks::run( 'getUserPermissionsErrorsExpensive', array( &$this, &$user, $action, &$result ) )
 		) {
-			$errors = $this->resultToError( $errors, $result );
+			if ( $result !== true ) {
+				// Backwards compatibility
+				$errors = $this->resultToError( $errors, $result );
+			} elseif ( !$errors ) {
+				$errors = array();
+			}
+			return false;
 		}
 
-		return $errors;
+		return true;
 	}
 
 	/**
@@ -2492,7 +2511,6 @@ class Title {
 		# Read has special handling
 		if ( $action == 'read' ) {
 			$checks = array(
-				'checkPermissionHooks',
 				'checkReadPermissions',
 			);
 		# Don't call checkSpecialsAndNSPermissions or checkCSSandJSPermissions
@@ -2502,7 +2520,6 @@ class Title {
 		} elseif ( $action == 'create' ) {
 			$checks = array(
 				'checkQuickPermissions',
-				'checkPermissionHooks',
 				'checkPageRestrictions',
 				'checkCascadingSourcesRestrictions',
 				'checkActionPermissions',
@@ -2511,7 +2528,6 @@ class Title {
 		} else {
 			$checks = array(
 				'checkQuickPermissions',
-				'checkPermissionHooks',
 				'checkSpecialsAndNSPermissions',
 				'checkCSSandJSPermissions',
 				'checkPageRestrictions',
@@ -2521,6 +2537,11 @@ class Title {
 			);
 		}
 
+		if ( !$this->checkPermissionHooks( $action, $user, $errors, $rigor, $short ) ) {
+			// Give extensions a chance to override anything
+			return $errors;
+		}
+
 		$errors = array();
 		while ( count( $checks ) > 0 &&
 				!( $short && count( $errors ) > 0 ) ) {
